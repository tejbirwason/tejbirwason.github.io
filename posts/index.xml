<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Tejbir (Tj) Wason</title>
    <link>https://www.tejbirwason.com/posts/</link>
    <description>Recent content in Posts on Tejbir (Tj) Wason</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 28 Aug 2022 04:00:00 +0000</lastBuildDate><atom:link href="https://www.tejbirwason.com/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Welcome to the blog!</title>
      <link>https://www.tejbirwason.com/posts/welcome-to-the-blog/</link>
      <pubDate>Sun, 28 Aug 2022 04:00:00 +0000</pubDate>
      
      <guid>https://www.tejbirwason.com/posts/welcome-to-the-blog/</guid>
      <description>This blog is setup using Hugo with a continuous integration with Github pages. I&amp;rsquo;m also using Forestry CMS to publish the blog posts.</description>
    </item>
    
    <item>
      <title>Code Block Test</title>
      <link>https://www.tejbirwason.com/posts/code-block-test/</link>
      <pubDate>Sun, 27 Jun 2021 09:00:00 +0000</pubDate>
      
      <guid>https://www.tejbirwason.com/posts/code-block-test/</guid>
      <description>String
Using indents:
text text text Fenced code block:
text text &amp;lt;tag&amp;gt; Fenced code block with language (lineNumbersInTable = false):
// JavaJavaJavaJavaJavaJavaJavaJavaJavaJavaJavaJavaJavaJavaJavaJavaJavaJavaJavaJavaJavaJavaJavaJavaJavaJavaJavaJavaJavaJava public final class String implements java.io.Serializable, Comparable&amp;lt;String&amp;gt;, CharSequence { /** The value is used for character storage. */ private final char value[]; /** The offset is the first index of the storage that is used. */ private final int offset; /** The count is the number of characters in the String.</description>
    </item>
    
    <item>
      <title>Changes to String in java (from 1.7.0_06)</title>
      <link>https://www.tejbirwason.com/posts/2020-06-06-changes-in-java-string/</link>
      <pubDate>Sat, 06 Jun 2020 09:00:00 +0000</pubDate>
      
      <guid>https://www.tejbirwason.com/posts/2020-06-06-changes-in-java-string/</guid>
      <description>Before 1.7.0_06, String has 4 non static field:
char[] value int[] offset int count int hash Subing.substring create a String by sharing the original String&amp;rsquo;s internal char[] value and setting offset. This saves memory and makes String.substring run in a constant time($O(1)$). Meanwhile, this feature may cause memory leak1.
http://hg.openjdk.java.net/jdk6/jdk6/jdk/file/8deef18bb749/src/share/classes/java/lang/String.java
public final class String implements java.io.Serializable, Comparable&amp;lt;String&amp;gt;, CharSequence { /** The value is used for character storage. */ private final char value[]; /** The offset is the first index of the storage that is used.</description>
    </item>
    
    <item>
      <title>Algorithms - Graphs</title>
      <link>https://www.tejbirwason.com/posts/2020-05-01-algorithms-graphs/</link>
      <pubDate>Fri, 01 May 2020 09:00:00 +0000</pubDate>
      
      <guid>https://www.tejbirwason.com/posts/2020-05-01-algorithms-graphs/</guid>
      <description>Undirected Graphs Some problems Path Shortest path Cycle Ehler tour: A cycle that uses each edge excatly once. Hamilton tour: A cycle that uses each vertex exactly once classical NP-complete problem. Connectivity MST: Biconnectivity: A vertex whose removal disconnects the graph Planarity Graph isomorphism: Are two graphs identical? No one knows so far. A lonstanding open problem Representations Real-world graphs tend to be sparse (huge number of vertices, small average vertex degree).</description>
    </item>
    
    <item>
      <title>Programming Language - Subtyping</title>
      <link>https://www.tejbirwason.com/posts/2020-04-29-subtyping/</link>
      <pubDate>Wed, 29 Apr 2020 09:00:00 +0000</pubDate>
      
      <guid>https://www.tejbirwason.com/posts/2020-04-29-subtyping/</guid>
      <description>Some Good Subtyping Rules Width subtyping: A supertype can have a subset of fields with the same types, i.e., a subtype can have extra fields. Permutation subtypings: A supertype can have the same set of fields with the same types in a different order. Transitivity: if t1 is subtype of t2, and t2 is subtype of t3, then t1 is subtype of t3. Reflexivity: Every type is a subtype of itself.</description>
    </item>
    
    <item>
      <title>Racket notes</title>
      <link>https://www.tejbirwason.com/posts/2020-02-29-racket/</link>
      <pubDate>Sat, 29 Feb 2020 09:00:00 +0000</pubDate>
      
      <guid>https://www.tejbirwason.com/posts/2020-02-29-racket/</guid>
      <description>Basic #lang racket (provide (all-defined-out)) ;this is a comment (define s &amp;#34;hello&amp;#34;) (define x 3) (define y (+ x 2)) (define cube1 (lambda (x) (* x (* x x)))) (define cube2 (lambda (x) (* x x x))) (define (cube3 x) (* x x x)) (define (pow1 x y) (if (=y 0) 1 (* x (pow1 x (- y 1))))) ; currying (define pow2 (lambda (x) (lambda (y) (pow1 x y)))) List Empty list: null () doesn&amp;quot;t work for null but &#39;() does build a list: (list e1 .</description>
    </item>
    
    <item>
      <title>Standard ML notes</title>
      <link>https://www.tejbirwason.com/posts/2019-12-30-standardml-notes/</link>
      <pubDate>Mon, 30 Dec 2019 09:00:00 +0000</pubDate>
      
      <guid>https://www.tejbirwason.com/posts/2019-12-30-standardml-notes/</guid>
      <description>Basics Comments (* SML comment *) Variable bindings and Expressions val x = 34; (* static environment: x : int *) (* dynamic environment: x --&amp;gt; 34 *) val y = x + 1; (* Use tilde character instead of minus to reprsent negation *) val z = ~1; (* Integer Division *) val w = y div x Strings:
(* `\n`のようなエスケープシーケンスが利用できる *) val x = &amp;#34;hello\n&amp;#34;; (* 文字列の連結には&amp;#39;^&amp;#39;を使う *) val y = &amp;#34;hello &amp;#34; ^ &amp;#34;world&amp;#34;; An ML program is a sequence of bindings.</description>
    </item>
    
    <item>
      <title>uipath ノート（三）- uipath orchestrator</title>
      <link>https://www.tejbirwason.com/posts/2019-11-23-uipath-orchestrator/</link>
      <pubDate>Sat, 23 Nov 2019 09:00:00 +0000</pubDate>
      
      <guid>https://www.tejbirwason.com/posts/2019-11-23-uipath-orchestrator/</guid>
      <description>利用手順 Official doc: https://docs.uipath.com/robot/docs/from-orchestrator-and-the-orchestrator-settings-window
マシンを追加 マシン側でマシン名とユーザ名を確認
C:\Users\user&amp;gt;hostname DESKTOP-ABCDE5F C:\Users\user&amp;gt;whoami desktop-abcde5f\user C:\Users\user&amp;gt; 追加完了後、マシンキーを取得する。
ロボットを登録 Type: studio (開発用？) Domain/Username: 上記のユーザ名 ローカルのorchestrator設定 Uipath Robotを開き⇒orchestratorの設定で、上記のマシンキーを入力する。 orchestrator URLに https://platform.uipath.com/ を入力する. Invalid machine keyというエラーが出たら、下記のようなURLを試す：
https://platform.uipath.com/&amp;lt;account name&amp;gt;/&amp;lt;service name&amp;gt; 参照：Uipath orchestrator error : invalid machine key
ロボットグループ(Environment)作成 プロジェクトをパブリッシュ(Publish) プロセスを追加 Automations　⇒　Processes
ジョブ(Jobs)の実行 Monitoring　⇒　Jobs
その他 再パブリッシュすると、Processが最新バージョンを使うため、変更作業が必要 Processes　⇒　More Options　⇒　View Process　⇒　最新のバージョンに切り替える
ジョブの停止 停止(Stop)：必ずワークフロー内で「停止すべきか確認(Should Stop)」アクティビティを使用する 強制終了(Kill)：処理中の内容に関わらず、ジョブを停止する アクティブなジョブは削除できない パラメーター変更の優先順位 ジョブ (Jobs) -&amp;gt; プロセス (Processes) -&amp;gt; パッケージ(UiPath Studio)</description>
    </item>
    
    <item>
      <title>uipath ノート（二）- Best Practice</title>
      <link>https://www.tejbirwason.com/posts/2019-11-18-uipath-best-practice/</link>
      <pubDate>Mon, 18 Nov 2019 09:00:00 +0000</pubDate>
      
      <guid>https://www.tejbirwason.com/posts/2019-11-18-uipath-best-practice/</guid>
      <description>時間をかけて各ワークフローに適したレイアウトを選択しましょう。 メイン: フローチャートまたはステートマシン
ビジネスロジック: フローチャート
UI インタラクション: シーケンス
フローチャートを使用することで、入れ子状の IF を回避
プロセスを小さなワークフローに分割しましょう。 分割したものを個別に開発、テスト
ワークフローの再利用
分割ファイルで作業することによる、より効率的な共同作業
必ず例外を処理しましょう。 例外が発生しやすいワークフローを [Try Catch (トライキャッチ)] ブロックに配置
外部から呼び出されたワークフローでも同様
リカバリシーケンスの設定
ワークフローを読みやすいものにしましょう。 すべてのコンポーネントにわかりやすい名前を選択
注記やコメントの使用
リアルタイムの実行状況のログ取得
環境設定を Config ファイルに格納
不要になったアプリケーションを終了させることで、常にクリーンな状態を維持しましょう。 </description>
    </item>
    
  </channel>
</rss>
